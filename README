var uno = "Es la forma más antigua de declarar variables en Js";
// ESTA DISPONIBLE EN TODO EL CÓDIGO O DENTRO DE UNA FUNCIÓN
// PUEDE SER REDECLARADA Y REASIGNADA
let dos = "Es la forma mas moderna de declarar las variables";
//
//NO PUEDES CREAR LA MISMA CAJA MAS DE UNA VEZ EN LA MISMA ÁREA
const tres = "es para cajas que no se pueden cambiar";
//DISPONIBLE SOLO DENTRO DEL BLOQUE DONDE LA CREAS
// NO PUEDES CAMBIAR EL CONTENIDO DE LA CAJA  CON EL MISMO NOMBRE EN EL MISMO BLOQUE
// en clean code siempre es bueno terminar las lineas de codigo con ;
//BUENAS PRACTICAS
//Usa let y const en lugar de var
//Usa const para valores queno cambian
//Nombra tus variables claramente, eso para beneficiar a la limpieza de codigo y minimizar errores si alguien mas entra al codigo
//Minimiza el uso de varibles globales

//CONDICIONALES
//Intrucciones que permiten tomar decicsiones
//if, permite ejeutar el codigo solo si se cumple una condicion especifica
// else if, si quiero comprobar condiciones diferentes en secuencia, si la primera no se cumple se evalua la siguiente. ""asincronismo""  de lo contrario si"
// else se usa al final de una serie de condicionales para manejar el caso en que ninguna de las anteriores se cumpla.

//OPERADORES DE COMPARACION
// comparar valores 
//a. igual a  ==
//compara si son iguales, ignorando el tipo de dato.
//b. igual a estrictamente ===
//compara si son iguales y del mismo tipo de dato.
// c. != no igual a
// compara si no son iguales e ignora el tipo de dato
//d. !== no igual, estrictamente
// no son iguales y no son del mismo tipo de dato.

//e. menor que <
//f .mayor que >
// g. menor o igual <=
//g. mayor o igual >=
//compara si un valor es mayor o igual a otro.

//CICLOS O BUCLES
// PERMITE REPETIR UNA SERIE DE INSTRUCCIONES VARIAS VECES
// CICLO FOR CUANDO SABEMOS CUANTAS VECES SE NECESITA REPETIR ALGO. POR EJEMPLO CONTAR DE 1 A 5, PUEDES USAR FOR PARA HACERLO DE MANERA ORDENADA
//inicializacion, condicion, incremento(modifica la variable en cada repeticion
for (let i = 1; i <= 5 ; i++){
    console.log(i);
}
//while
//Es util cuando no sables cuantas veces necesitas repetir. 
let i = 1
while(i <= 5){
    console.log(i)
    i++
}

//do while asegura que el codigo se ejecute al menos una vez antes de verificar la condicion
let i = 1
do{
    console.log(i);
    i++
}while(i <= 5)

//FOR CUANDO SE CUANTAS VECES NECESITO  REPETIR UN BLOQUE DE CODIGO. CONOCIDAS Y DEFINIDAS
//WHILE, CUANDO NO SABES CUANTAS VECES Y SOLO QUIERES SEGUIR MIENTRAS UNA CONDICION SEA VERDADERA, MAS FLEXIBLE
// DO WHILE CUANDO NECESITO QUE SE EJECUTE AL MENOS UNA VEZ, INCLUSO SI LA CONDICION ES FALSA.

//A BREAK DETIENE EL CICO EN EL QUE SE ENCUENTRA
//CUANDO QUIERES SALIR DEL CICLO ANTES DE QUE SE COMPLETE TODAS LAS REPETICIONES.
let numeros = [10,20,30,40,50];
let buscar = 30;
for(let i= 0; i < numeros.length; i++){
    if(numeros[i]=== buscar){
    console.log("numero encontrado en la posicion : " + i)
    break;
}
}

//continue

// salta el resto del codigo en la interacion actuial del ciclo y pasa a la siguiente iteracion
//cuando quieres omitir ciertas partes del ciclo basadas en una condicion.
for(let i = 1; i <= 5; i++){
    if(i === 3){
        continue;
    }
    console.log(i) // imprime 1,2,4,5
}

//ciclos anidados
// son ciclos dentro de otros ciclos
// control de ciclos en js


//ARREGLOY O ARRAYS
//UNA COLECCION DE ELEMENTOS QUE SE ALMACENAN EN UNA SOLA  VARIABLE
//CREAR LISTA 
let frutas = ["Manzana","Banana", "Naranja"]
console.log(frutas[0]);//Manzana
console.log(frutas[1]);//Banana

// se puede acceder a cada elemenyo de un arreglo usando su posicion indice. los indices empiezan en cero lo que significa que el primer elemento se cuenta o esta en la posicion cero.
//MODIFIACIONES
//CAMBIAR UNA ELEMENTO ESPECIFICO DE UN ARREGLO
frutas[1] = "Pera";
console.log(frutas)

//metodos comunes de arreglos
//PUSH-AGREGA UN NUEVO ELEMENTO AL FINAL DE UN ARREGLO
frutas.push("mango")
console.log(frutas)
//POP - elimina el ultimo elemento del array
frutas.pop()
//shift- elimina el primer elemento
frustas.shift()
//unshift-agrega un nuevo elemento al principio del arreglo
//lenght- devuelve el numero de elementos del array

//FUNCIONES
//LA FUNCION COMO UNA RECETA DE COCINA TE DICE EZACTAMENTE QUE HACER PASO A PASO
//UN BLOQUE DE CODIGO QUE SIGUE INSTRUCCIONES PARA REALIZAR UNA TAREA  ESPECIFICA.
// LAS FUNCIONES PERMITEN REUTILIZAR CODIGO
//FUNCIONES DECLRATIVAS
//Es la forma mas comun de funcion. Es como darle un nombre a la receta y luego escribir los pasos.

//funciones de expresion
//asignarla a una varibale es como guardfar la receta en un cajon y usarla cuando necesites.
//parametros ()ingredientes de la receta los valores que se necesitan para realizar los pasos.
//el retorno es como el plato terminado de la receta, es el resultado que obtenemos una vez la funcion cumple su trabajo

//FUNCIONES ANONIMAS Y ARROW FUNCTIONS
//se guardan en una variable, no tienen nombre.
//arrow function(funciones flecha)

//JSON.stringify/ JSON.parse
//1Imagina que tienen un objeto, una lista de cosas con valor y nombre
//2 Hace lo contrario, convierte una cadena de texto en un objeto que puedes usar en tu codigo

//Manejo de datos json en aplicaciones web
//guardar datos en el localstorage
//localstorage es una manera de guardar dtos en el navegador de un usuario. Sin embargo, Local solo guarda cadenas de texto no objetos

//GITHUB


